// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payment_room.sql

package database

import (
	"context"
	"database/sql"
)

const createPaymentRoom = `-- name: CreatePaymentRoom :one
INSERT INTO payment_rooms(id, created_on, updated_at, created_by, raw_json_data)
VALUES(?, DATETIME('now','localtime'), DATETIME('now','localtime'), ?, ?) RETURNING id, created_on, updated_at, created_by, raw_json_data
`

type CreatePaymentRoomParams struct {
	ID          interface{}
	CreatedBy   interface{}
	RawJsonData sql.NullString
}

func (q *Queries) CreatePaymentRoom(ctx context.Context, arg CreatePaymentRoomParams) (PaymentRoom, error) {
	row := q.db.QueryRowContext(ctx, createPaymentRoom, arg.ID, arg.CreatedBy, arg.RawJsonData)
	var i PaymentRoom
	err := row.Scan(
		&i.ID,
		&i.CreatedOn,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.RawJsonData,
	)
	return i, err
}

const getAllPaymentRooms = `-- name: GetAllPaymentRooms :many
SELECT id, created_on, updated_at, created_by, raw_json_data FROM payment_rooms
`

func (q *Queries) GetAllPaymentRooms(ctx context.Context) ([]PaymentRoom, error) {
	rows, err := q.db.QueryContext(ctx, getAllPaymentRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaymentRoom
	for rows.Next() {
		var i PaymentRoom
		if err := rows.Scan(
			&i.ID,
			&i.CreatedOn,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.RawJsonData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoomCreator = `-- name: GetRoomCreator :one
SELECT id, created_on, updated_at, username, balance, user_token FROM users WHERE users.id= (SELECT created_by FROM payment_rooms WHERE payment_rooms.id=? LIMIT 1) LIMIT 1
`

func (q *Queries) GetRoomCreator(ctx context.Context, id interface{}) (User, error) {
	row := q.db.QueryRowContext(ctx, getRoomCreator, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedOn,
		&i.UpdatedAt,
		&i.Username,
		&i.Balance,
		&i.UserToken,
	)
	return i, err
}
