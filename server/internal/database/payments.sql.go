// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payments.sql

package database

import (
	"context"
	"database/sql"
)

const assignPayment = `-- name: AssignPayment :exec
UPDATE payments SET user_id=?, payment_status= "ASSIGNED" WHERE id=?
`

type AssignPaymentParams struct {
	UserID interface{}
	ID     interface{}
}

func (q *Queries) AssignPayment(ctx context.Context, arg AssignPaymentParams) error {
	_, err := q.db.ExecContext(ctx, assignPayment, arg.UserID, arg.ID)
	return err
}

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments(id, created_on, updated_at,user_id, room_id,  amount , item_description, payment_status)
VALUES (?, DATETIME('now','localtime'), DATETIME('now','localtime'),?, ?, ?, ?,"PENDING" ) RETURNING id, created_on, updated_at, user_id, room_id, item_description, amount, payment_status
`

type CreatePaymentParams struct {
	ID              interface{}
	UserID          interface{}
	RoomID          interface{}
	Amount          float64
	ItemDescription sql.NullString
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, createPayment,
		arg.ID,
		arg.UserID,
		arg.RoomID,
		arg.Amount,
		arg.ItemDescription,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.CreatedOn,
		&i.UpdatedAt,
		&i.UserID,
		&i.RoomID,
		&i.ItemDescription,
		&i.Amount,
		&i.PaymentStatus,
	)
	return i, err
}

const getAllUserPaymentInRoom = `-- name: GetAllUserPaymentInRoom :exec
SELECT id, created_on, updated_at, user_id, room_id, item_description, amount, payment_status FROM payments WHERE user_id=? AND room_id =?
`

type GetAllUserPaymentInRoomParams struct {
	UserID interface{}
	RoomID interface{}
}

func (q *Queries) GetAllUserPaymentInRoom(ctx context.Context, arg GetAllUserPaymentInRoomParams) error {
	_, err := q.db.ExecContext(ctx, getAllUserPaymentInRoom, arg.UserID, arg.RoomID)
	return err
}

const processPayment = `-- name: ProcessPayment :exec
UPDATE payments SET updated_at= DATETIME('now','localtime'), payment_status="PROCESSED" WHERE id=?
`

func (q *Queries) ProcessPayment(ctx context.Context, id interface{}) error {
	_, err := q.db.ExecContext(ctx, processPayment, id)
	return err
}
