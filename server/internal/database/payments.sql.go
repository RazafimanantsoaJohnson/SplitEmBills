// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payments.sql

package database

import (
	"context"
)

const assignPayment = `-- name: AssignPayment :exec
UPDATE payments SET user_id=?, payment_status= "ASSIGNED" WHERE id=?
`

type AssignPaymentParams struct {
	UserID interface{}
	ID     interface{}
}

func (q *Queries) AssignPayment(ctx context.Context, arg AssignPaymentParams) error {
	_, err := q.db.ExecContext(ctx, assignPayment, arg.UserID, arg.ID)
	return err
}

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments(id, created_on, updated_at, amount ,user_id, room_id, payment_status)
VALUES (?, DATETIME('now','localtime'), DATETIME('now','localtime'),0.0 , ?, ?, "PENDING" ) RETURNING id, created_on, updated_at, user_id, room_id, item_description, amount, payment_status
`

type CreatePaymentParams struct {
	ID     interface{}
	UserID interface{}
	RoomID interface{}
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, createPayment, arg.ID, arg.UserID, arg.RoomID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.CreatedOn,
		&i.UpdatedAt,
		&i.UserID,
		&i.RoomID,
		&i.ItemDescription,
		&i.Amount,
		&i.PaymentStatus,
	)
	return i, err
}

const processPayment = `-- name: ProcessPayment :exec
UPDATE payments SET updated_at= DATETIME('now','localtime'), amount=?, payment_status="PROCESSED" WHERE id=?
`

type ProcessPaymentParams struct {
	Amount float64
	ID     interface{}
}

func (q *Queries) ProcessPayment(ctx context.Context, arg ProcessPaymentParams) error {
	_, err := q.db.ExecContext(ctx, processPayment, arg.Amount, arg.ID)
	return err
}
